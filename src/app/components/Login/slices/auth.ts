import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import AuthService, { User } from "../services/AuthService";
import { RootState } from "../../../../redux/store";

type LoginDetails = {
    readonly username: string;
    readonly password: string;
};

export const loginUser = createAsyncThunk(
    "auth/login",
    async ({ username, password }: LoginDetails, thunkAPI) => {
        const authService = new AuthService();

        try {
            return await authService.login(username, password);
        } catch (err: any) {
            return thunkAPI.rejectWithValue({ errorCode: 500, message: err.message });
        }
    }
);

export type AuthState = {
    readonly user: undefined | User,
    readonly fetching: boolean;
    readonly error: Error | undefined;
}

type Error = {
    readonly errorCode: number;
    readonly message: string;
}

const initialState: AuthState = {
    user: undefined,
    fetching: false,
    error: undefined,
};

export const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
        clearState: () => initialState
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loginUser.pending, (state) => {
                state.fetching = true;
            })
            .addCase(loginUser.rejected, (state, action) => {
                state.fetching = false;
                state.error = action.payload as Error;
            })
            .addCase(loginUser.fulfilled, (state, action) => {
                state.fetching = false;
                state.user = action.payload;
            });
    },
});

export const { clearState } = authSlice.actions;
export const authSelector = (state: RootState) => state.auth;
export default authSlice.reducer;
